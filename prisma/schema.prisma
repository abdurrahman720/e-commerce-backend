datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  country        String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           Role      @default(BUYER)
  reviews        Review[]
  Order          Order[]
  address        Address?
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  subcategories String[]
  products       Product[]
}



// model Subcategory {
//   id          String  @id @default(auto()) @map("_id") @db.ObjectId
//   name        String
//   description String?

//   Category   Category? @relation(fields: [categoryId], references: [id])
//   categoryId String?   @db.ObjectId
//   products    Product[]
// }

model Product {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  categoryId    String      @db.ObjectId
  name          String
  description   String
  howItWorks String?
  careGuide String?
  deliveryReturns String?
  price         Float
  location String?       
  inStock       Boolean @default(false)
  quantity Int
  unit Unit
  images        String[]
  thumbnail     String?
  reviews       Review[]
  category      Category    @relation(fields: [categoryId], references: [id])
  subcategory   String?
  createdAt      DateTime?  @default(now())
  updatedAt      DateTime? @updatedAt
}

enum Unit {
  KG
  POUND
  LITRE
}

model Order {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  amount          Float
  currency        String
  status          String
  deliveryStatus  String?
  createdAt       DateTime          @default(now())
  paymentIntentId String            @unique
  products        CartProductType[]

  address Address

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type CartProductType {
  id          String
  name        String
  description String
  category    String
  brand       String

  quantity    Int
  price       Float
}



type Address {
  city       String?
  country    String?
  line1      String?
  line2      String?
  postalCode String?
  state      String?
}
